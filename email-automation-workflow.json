{
  "name": "Email Automation Workflow",
  "nodes": [
    {
      "parameters": {
        "authentication": "oAuth2",
        "event": "messageReceived",
        "simple": true,
        "filters": {
          "readStatus": "unread"
        }
      },
      "id": "gmail-trigger",
      "name": "Gmail Trigger",
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.3,
      "position": [240, 300],
      "credentials": {
        "gmailOAuth2": {
          "id": "gmail-oauth2",
          "name": "Gmail OAuth2"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.from }}",
              "rightValue": "jessestay@gmail.com",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-sender",
      "name": "Check Sender",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "// Extract email content and metadata\nconst email = $input.first().json;\n\n// Parse email content\nconst subject = email.subject || '';\nconst body = email.body || '';\nconst from = email.from || '';\nconst to = email.to || '';\nconst date = email.date || new Date().toISOString();\n\n// Extract key information\nconst isUrgent = subject.toLowerCase().includes('urgent') || \n                 subject.toLowerCase().includes('asap') ||\n                 body.toLowerCase().includes('urgent');\n\nconst isQuestion = body.includes('?') || \n                  subject.toLowerCase().includes('question') ||\n                  subject.toLowerCase().includes('help');\n\nconst isComplaint = body.toLowerCase().includes('complaint') ||\n                   body.toLowerCase().includes('problem') ||\n                   body.toLowerCase().includes('issue') ||\n                   subject.toLowerCase().includes('complaint');\n\n// Determine priority and category\nlet priority = 'normal';\nlet category = 'general';\nlet responseTemplate = 'general';\n\nif (isUrgent) {\n  priority = 'high';\n  category = 'urgent';\n  responseTemplate = 'urgent';\n} else if (isQuestion) {\n  priority = 'medium';\n  category = 'question';\n  responseTemplate = 'question';\n} else if (isComplaint) {\n  priority = 'high';\n  category = 'complaint';\n  responseTemplate = 'complaint';\n}\n\n// Extract contact information\nconst phoneMatch = body.match(/\\b\\d{3}[-.]?\\d{3}[-.]?\\d{4}\\b/);\nconst emailMatch = body.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/);\n\nreturn [{\n  originalEmail: email,\n  subject: subject,\n  body: body,\n  from: from,\n  to: to,\n  date: date,\n  priority: priority,\n  category: category,\n  responseTemplate: responseTemplate,\n  isUrgent: isUrgent,\n  isQuestion: isQuestion,\n  isComplaint: isComplaint,\n  extractedPhone: phoneMatch ? phoneMatch[0] : null,\n  extractedEmail: emailMatch ? emailMatch[0] : null,\n  processedAt: new Date().toISOString()\n}];"
      },
      "id": "process-email",
      "name": "Process Email",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2.2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.priority }}",
              "rightValue": "high",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-priority",
      "name": "Check Priority",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "fromEmail": "jessestay@gmail.com",
        "toEmail": "jessestay@gmail.com",
        "subject": "ðŸš¨ URGENT: {{ $json.subject }}",
        "message": "=High Priority Email Received:\n\nFrom: {{ $json.from }}\nSubject: {{ $json.subject }}\nDate: {{ $json.date }}\nCategory: {{ $json.category }}\n\nContent:\n{{ $json.body }}\n\n---\nProcessed at: {{ $json.processedAt }}",
        "options": {
          "allowUnauthorizedCerts": false
        }
      },
      "id": "send-urgent-notification",
      "name": "Send Urgent Notification",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [1120, 200],
      "credentials": {
        "smtp": {
          "id": "gmail-smtp",
          "name": "Gmail SMTP"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Generate automated response based on category\nconst data = $input.first().json;\nconst { category, responseTemplate, from, subject, body } = data;\n\n// Response templates\nconst templates = {\n  urgent: {\n    subject: `Re: ${subject} - We're on it!`,\n    body: `Hi there,\n\nThank you for your urgent message. We've received your request and are prioritizing it immediately.\n\nOur team will respond within 1 hour during business hours.\n\nBest regards,\nStayNAlive.com Team`\n  },\n  question: {\n    subject: `Re: ${subject} - Thanks for your question!`,\n    body: `Hi there,\n\nThank you for reaching out with your question. We've received your message and will get back to you within 24 hours.\n\nIn the meantime, you might find helpful information in our FAQ: https://staynalive.com/faq\n\nBest regards,\nStayNAlive.com Support Team`\n  },\n  complaint: {\n    subject: `Re: ${subject} - We're sorry to hear about this`,\n    body: `Hi there,\n\nWe sincerely apologize for any inconvenience you've experienced. Your feedback is important to us.\n\nWe've escalated your concern to our management team and will respond within 4 hours.\n\nBest regards,\nStayNAlive.com Customer Service`\n  },\n  general: {\n    subject: `Re: ${subject} - Thank you for contacting us`,\n    body: `Hi there,\n\nThank you for your message. We've received it and will respond within 24 hours.\n\nBest regards,\nStayNAlive.com Team`\n  }\n};\n\nconst template = templates[responseTemplate] || templates.general;\n\nreturn [{\n  ...data,\n  responseSubject: template.subject,\n  responseBody: template.body,\n  responseTo: from,\n  responseFrom: 'jessestay@gmail.com'\n}];"
      },
      "id": "generate-response",
      "name": "Generate Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2.2,
      "position": [1120, 400]
    },
    {
      "parameters": {
        "fromEmail": "={{ $json.responseFrom }}",
        "toEmail": "={{ $json.responseTo }}",
        "subject": "={{ $json.responseSubject }}",
        "message": "={{ $json.responseBody }}",
        "options": {
          "allowUnauthorizedCerts": false
        }
      },
      "id": "send-auto-response",
      "name": "Send Auto Response",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [1340, 400],
      "credentials": {
        "smtp": {
          "id": "gmail-smtp",
          "name": "Gmail SMTP"
        }
      }
    },
    {
      "parameters": {
        "url": "https://webhook.site/your-unique-url",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "from_email",
              "value": "={{ $json.from }}"
            },
            {
              "name": "to_email", 
              "value": "={{ $json.to }}"
            },
            {
              "name": "subject",
              "value": "={{ $json.subject }}"
            },
            {
              "name": "priority",
              "value": "={{ $json.priority }}"
            },
            {
              "name": "category",
              "value": "={{ $json.category }}"
            },
            {
              "name": "processed_at",
              "value": "={{ $json.processedAt }}"
            },
            {
              "name": "response_sent",
              "value": "={{ $json.responseSubject ? 'yes' : 'no' }}"
            }
          ]
        },
        "options": {
          "retryOnFail": true
        }
      },
      "id": "log-email",
      "name": "Log Email",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.category }}",
              "rightValue": "complaint",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-complaint",
      "name": "Check if Complaint",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [900, 500]
    },
    {
      "parameters": {
        "url": "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "text",
              "value": "ðŸš¨ Customer Complaint Received\n\nFrom: {{ $json.from }}\nSubject: {{ $json.subject }}\nPriority: {{ $json.priority }}\n\nContent: {{ $json.body }}\n\nPlease review immediately!"
            }
          ]
        },
        "options": {}
      },
      "id": "notify-slack",
      "name": "Notify Slack",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1120, 600]
    }
  ],
  "connections": {
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "Check Sender",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Sender": {
      "main": [
        [
          {
            "node": "Process Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Email": {
      "main": [
        [
          {
            "node": "Check Priority",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check if Complaint",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Priority": {
      "main": [
        [
          {
            "node": "Send Urgent Notification",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Generate Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Urgent Notification": {
      "main": [
        [
          {
            "node": "Log Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Response": {
      "main": [
        [
          {
            "node": "Send Auto Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Auto Response": {
      "main": [
        [
          {
            "node": "Log Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if Complaint": {
      "main": [
        [
          {
            "node": "Notify Slack",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Notify Slack": {
      "main": [
        [
          {
            "node": "Log Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-09-15T23:00:00.000Z",
      "updatedAt": "2025-09-15T23:00:00.000Z",
      "id": "email-automation",
      "name": "Email Automation"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-09-15T23:00:00.000Z",
  "versionId": "1"
}
