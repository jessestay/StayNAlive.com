{
  "name": "Smart Email Automation",
  "nodes": [
    {
      "id": "gmail-trigger",
      "name": "Gmail Trigger",
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.3,
      "position": [240, 300],
      "parameters": {
        "authentication": "oAuth2",
        "event": "messageReceived",
        "simple": true,
        "filters": {
          "readStatus": "unread"
        }
      },
      "credentials": {
        "gmailOAuth2": {
          "id": "gmail-oauth2",
          "name": "Gmail OAuth2"
        }
      }
    },
    {
      "id": "process-email",
      "name": "Process Email",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300],
      "parameters": {
        "jsCode": "// Process incoming email and categorize it\nconst email = $input.first().json;\n\n// Extract basic information\nconst subject = email.subject || '';\nconst body = email.body || '';\nconst from = email.from || '';\nconst to = email.to || '';\nconst date = email.date || new Date().toISOString();\n\n// Smart categorization using keyword detection\nconst isUrgent = subject.toLowerCase().includes('urgent') || \n                 subject.toLowerCase().includes('asap') ||\n                 subject.toLowerCase().includes('emergency') ||\n                 body.toLowerCase().includes('urgent') ||\n                 body.toLowerCase().includes('asap');\n\nconst isQuestion = body.includes('?') || \n                  subject.toLowerCase().includes('question') ||\n                  subject.toLowerCase().includes('help') ||\n                  subject.toLowerCase().includes('how to') ||\n                  body.toLowerCase().includes('how do i');\n\nconst isComplaint = body.toLowerCase().includes('complaint') ||\n                   body.toLowerCase().includes('problem') ||\n                   body.toLowerCase().includes('issue') ||\n                   body.toLowerCase().includes('unhappy') ||\n                   subject.toLowerCase().includes('complaint') ||\n                   subject.toLowerCase().includes('problem');\n\nconst isSupport = body.toLowerCase().includes('support') ||\n                 body.toLowerCase().includes('help') ||\n                 body.toLowerCase().includes('technical') ||\n                 subject.toLowerCase().includes('support');\n\n// Determine priority and category\nlet priority = 'normal';\nlet category = 'general';\nlet responseTemplate = 'general';\n\nif (isUrgent) {\n  priority = 'high';\n  category = 'urgent';\n  responseTemplate = 'urgent';\n} else if (isComplaint) {\n  priority = 'high';\n  category = 'complaint';\n  responseTemplate = 'complaint';\n} else if (isQuestion) {\n  priority = 'medium';\n  category = 'question';\n  responseTemplate = 'question';\n} else if (isSupport) {\n  priority = 'medium';\n  category = 'support';\n  responseTemplate = 'support';\n}\n\n// Extract contact information\nconst phoneMatch = body.match(/\\b\\d{3}[-.]?\\d{3}[-.]?\\d{4}\\b/);\nconst emailMatch = body.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/);\n\n// Sentiment analysis (basic)\nconst positiveWords = ['thank', 'great', 'excellent', 'good', 'love', 'amazing', 'perfect'];\nconst negativeWords = ['bad', 'terrible', 'awful', 'hate', 'disappointed', 'angry', 'frustrated'];\n\nconst positiveCount = positiveWords.filter(word => \n  body.toLowerCase().includes(word)\n).length;\nconst negativeCount = negativeWords.filter(word => \n  body.toLowerCase().includes(word)\n).length;\n\nlet sentiment = 'neutral';\nif (positiveCount > negativeCount) sentiment = 'positive';\nelse if (negativeCount > positiveCount) sentiment = 'negative';\n\nreturn [{\n  originalEmail: email,\n  subject: subject,\n  body: body,\n  from: from,\n  to: to,\n  date: date,\n  priority: priority,\n  category: category,\n  responseTemplate: responseTemplate,\n  isUrgent: isUrgent,\n  isQuestion: isQuestion,\n  isComplaint: isComplaint,\n  isSupport: isSupport,\n  sentiment: sentiment,\n  extractedPhone: phoneMatch ? phoneMatch[0] : null,\n  extractedEmail: emailMatch ? emailMatch[0] : null,\n  processedAt: new Date().toISOString(),\n  wordCount: body.split(' ').length,\n  hasAttachments: email.attachments && email.attachments.length > 0\n}];"
      }
    },
    {
      "id": "check-priority",
      "name": "Check Priority",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [680, 300],
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.priority }}",
              "rightValue": "high",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      }
    },
    {
      "id": "send-urgent-notification",
      "name": "Send Urgent Notification",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [900, 200],
      "parameters": {
        "fromEmail": "jesse@staynalive.com",
        "toEmail": "jesse@staynalive.com",
        "subject": "ðŸš¨ URGENT: {{ $json.subject }}",
        "message": "=High Priority Email Received:\n\nFrom: {{ $json.from }}\nSubject: {{ $json.subject }}\nDate: {{ $json.date }}\nCategory: {{ $json.category }}\nSentiment: {{ $json.sentiment }}\n\nContent:\n{{ $json.body }}\n\n---\nProcessed at: {{ $json.processedAt }}\n\nAction Required: Please review this email immediately!"
      },
      "credentials": {
        "smtp": {
          "id": "gmail-smtp",
          "name": "Gmail SMTP"
        }
      }
    },
    {
      "id": "generate-response",
      "name": "Generate Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 400],
      "parameters": {
        "jsCode": "// Generate contextual automated response\nconst data = $input.first().json;\nconst { category, responseTemplate, from, subject, body, sentiment, isUrgent } = data;\n\n// Response templates with personalization\nconst templates = {\n  urgent: {\n    subject: `Re: ${subject} - We're on it!`,\n    body: `Hi there,\n\nThank you for your urgent message. We've received your request and are prioritizing it immediately.\n\nOur team will respond within 1 hour during business hours (9 AM - 6 PM PST).\n\nIf this is a critical issue, please call us at (555) 123-4567.\n\nBest regards,\nJesse Stay\nStayNAlive.com Team`\n  },\n  question: {\n    subject: `Re: ${subject} - Thanks for your question!`,\n    body: `Hi there,\n\nThank you for reaching out with your question. We've received your message and will get back to you within 24 hours.\n\nIn the meantime, you might find helpful information in our FAQ: https://staynalive.com/faq\n\nIf you need immediate assistance, please call us at (555) 123-4567.\n\nBest regards,\nJesse Stay\nStayNAlive.com Support Team`\n  },\n  complaint: {\n    subject: `Re: ${subject} - We're sorry to hear about this`,\n    body: `Hi there,\n\nWe sincerely apologize for any inconvenience you've experienced. Your feedback is important to us.\n\nWe've escalated your concern to our management team and will respond within 4 hours.\n\nIf you'd like to discuss this further, please call me directly at (555) 123-4567.\n\nBest regards,\nJesse Stay\nStayNAlive.com Customer Service`\n  },\n  support: {\n    subject: `Re: ${subject} - Technical Support Request Received`,\n    body: `Hi there,\n\nThank you for contacting our technical support team. We've received your request and assigned it a ticket number.\n\nOur technical team will review your issue and respond within 24 hours.\n\nFor urgent technical issues, please call our support line at (555) 123-4567.\n\nBest regards,\nJesse Stay\nStayNAlive.com Technical Support`\n  },\n  general: {\n    subject: `Re: ${subject} - Thank you for contacting us`,\n    body: `Hi there,\n\nThank you for your message. We've received it and will respond within 24 hours.\n\nIf you need immediate assistance, please call us at (555) 123-4567.\n\nBest regards,\nJesse Stay\nStayNAlive.com Team`\n  }\n};\n\n// Select template based on category\nconst template = templates[responseTemplate] || templates.general;\n\n// Add personalization based on sentiment\nlet personalizedBody = template.body;\nif (sentiment === 'positive') {\n  personalizedBody = personalizedBody.replace('Thank you for your message', 'Thank you for your wonderful message');\n} else if (sentiment === 'negative') {\n  personalizedBody = personalizedBody.replace('Thank you for your message', 'Thank you for your message, and we appreciate you taking the time to reach out');\n}\n\nreturn [{\n  ...data,\n  responseSubject: template.subject,\n  responseBody: personalizedBody,\n  responseTo: from,\n  responseFrom: 'jesse@staynalive.com',\n  responseGenerated: true\n}];"
      }
    },
    {
      "id": "send-auto-response",
      "name": "Send Auto Response",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [1120, 400],
      "parameters": {
        "fromEmail": "={{ $json.responseFrom }}",
        "toEmail": "={{ $json.responseTo }}",
        "subject": "={{ $json.responseSubject }}",
        "message": "={{ $json.responseBody }}"
      },
      "credentials": {
        "smtp": {
          "id": "gmail-smtp",
          "name": "Gmail SMTP"
        }
      }
    },
    {
      "id": "log-email",
      "name": "Log Email",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1120, 300],
      "parameters": {
        "url": "https://webhook.site/your-unique-url",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "from_email",
              "value": "={{ $json.from }}"
            },
            {
              "name": "to_email",
              "value": "={{ $json.to }}"
            },
            {
              "name": "subject",
              "value": "={{ $json.subject }}"
            },
            {
              "name": "priority",
              "value": "={{ $json.priority }}"
            },
            {
              "name": "category",
              "value": "={{ $json.category }}"
            },
            {
              "name": "sentiment",
              "value": "={{ $json.sentiment }}"
            },
            {
              "name": "processed_at",
              "value": "={{ $json.processedAt }}"
            },
            {
              "name": "response_sent",
              "value": "={{ $json.responseGenerated ? 'yes' : 'no' }}"
            }
          ]
        },
        "options": {
          "retryOnFail": true
        }
      }
    }
  ],
  "connections": {
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "Process Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Email": {
      "main": [
        [
          {
            "node": "Check Priority",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Priority": {
      "main": [
        [
          {
            "node": "Send Urgent Notification",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Generate Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Urgent Notification": {
      "main": [
        [
          {
            "node": "Log Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Response": {
      "main": [
        [
          {
            "node": "Send Auto Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Auto Response": {
      "main": [
        [
          {
            "node": "Log Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  }
}



